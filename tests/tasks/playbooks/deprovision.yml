- hosts: localhost
  become: no
  gather_facts: no

  tasks:
    # The playbook consumes structures of this form passed in by the mechanism
    # in the Ansible variable `duffy_in`:
    #
    # duffy_in ->
    #   {
    #     "nodes": [
    #       {
    #         "id": 1,
    #         "hostname": "...",
    #         "ipaddr": "...",
    #         "data": {"provision": {"id": 1, ...}}
    #       },
    #       {
    #         "id": 2,
    #         "hostname": "...",
    #         "ipaddr": "...",
    #         "data": {"provision": {"id": 2, ...}}
    #       },
    #       ...
    #     ]
    #   }
    #
    # The data.provision field of a node contains the result returned for that
    # node from the provisioning playbook and should contain all necessary
    # information to perform the deprovisioning (e.g. a machine id specific to
    # the used cloud management software).

    # This task emulates deprovisioning the nodes, its result can be arbitrary
    # in principle, but ...
    - name: "Deprovision the things!"
      set_fact:
        mech_specific_result: >-
          {{ mech_specific_result | default([]) + [item] }}
      loop: "{{ duffy_in.nodes | list }}"

    # ... this (mandatory) task has to be able to transform it into the
    # expected output format, i.e. set a fact `duffy_out` which repeats enough
    # of data.provision passed into the playbook for each successfully
    # deprovisioned node to clearly correlate results with node objects so
    # Duffy can chalk up nodes for reuse, or mark them as retired or failed
    # appropriately.
    #
    # duffy_out ->
    #   {
    #     "nodes": [{"id": 1, ...}, {"id": 2, ...}]
    #   }
    - name: "Summarize the things!"
      set_fact:
        duffy_out:
          nodes: "{{ mech_specific_result | json_query(mech_specific_query) }}"
      vars:
        mech_specific_query: "[*].data.provision"

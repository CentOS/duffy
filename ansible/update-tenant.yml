---
- hosts: duffy_server
  become: yes
  become_user: duffy
  environment:
    PATH: "{{ duffy_home | default('/home/duffy') }}/bin:{{ ansible_env.PATH }}"
  vars:
    _virtualenv: "{{ duffy_virtualenv | default('/srv/duffy') }}"
    _play_actions: []
  tasks:
    - name: Verify duffy_tenant is set
      fail:
        msg: "The duffy_tenant variable must be set"
      when: duffy_tenant is not defined

    - name: "Verify variables don't contain quotes"
      fail:
        msg: "The {{ item }} variable must not contain quotes."
      when: >-
        lookup('vars', item, default=omit) != omit
        and ("'" in lookup('vars', item) or '"' in lookup('vars', item))
      loop:
        - duffy_tenant
        - ssh_key

    - name: Check if tenant exists
      command:
        argv:
          - psql
          - duffy
          - "-qtAc"
          - "SELECT COUNT(name) FROM tenants WHERE name='{{ duffy_tenant }}';"
      changed_when: no
      register: tenant_exists

    - when: tenant_exists.stdout == "1"
      block:
        - when: ssh_key is defined
          block:
            - name: Update SSH key for Duffy tenant {{ duffy_tenant }}
              command:
                argv:
                  - psql
                  - duffy
                  - "-qtAc"
                  - >-
                    UPDATE tenants
                    SET ssh_key='{{ ssh_key }}'
                    WHERE name='{{ duffy_tenant }}'

            - name: Register action
              set_fact:
                _play_actions: "{{ _play_actions + ['ssh_key'] }}"

        - when: reset_api_key | default(false)
          block:
            - name: Create an API key
              command: uuidgen --random
              register: uuidgen_out

            - name: Compute bcrypt hash of API key
              command:
                argv:
                  - "{{ _virtualenv }}/bin/python"
                  - "-c"
                  - |
                    import bcrypt
                    print(
                        bcrypt.hashpw(
                            "{{ uuidgen_out.stdout }}".encode("ascii"),
                            bcrypt.gensalt(),
                        ).decode("ascii"),
                        end="",
                    )
              register: bcrypt_out

            - name: Update API Key for Duffy tenant {{ duffy_tenant }}
              command:
                argv:
                  - psql
                  - duffy
                  - "-qtAc"
                  - >-
                    UPDATE tenants
                    SET api_key='{{ bcrypt_out.stdout }}'
                    WHERE name='{{ duffy_tenant }}'

            - name: Register action
              set_fact:
                _play_actions: "{{ _play_actions + ['api_key'] }}"

        - name: Report no action taken
          debug:
            msg: |-2
              No action taken.
              ==> Set one of reset_api_key=yes or ssh_key=...
          when: '_play_actions | length == 0'

        - name: Report SSH key set
          debug:
            msg: "Set SSH key of tenant {{ duffy_tenant }}."
          when: '"ssh_key" in _play_actions'

        - name: Report API key set
          debug:
            msg: "Set API key of tenant {{ duffy_tenant }} to: {{ uuidgen_out.stdout }}"
          when: '"api_key" in _play_actions'
